#ask for players name
#there will be a deck consisting of 52 cards
#this deck will be a hash with keys being the cards number or
#face and the value being the actual value of the card
#begin
#two cards are given to the player and dealer at random
#the player chooses to hit or stay
#if hit then add card to hand else player stays and save card
#value and bypass this method until dealer stays
#check to see if busted or 21
#if card value is < 17 dealer stays else dealer hits 
#check to see if busted or 21
#end until player is busted || dealer is busted || both 
#player and dealer stay
#if both chose to stay then compare values of all cards
#if dealer values >= player values then dealer wins else
#player wins
#ask to play another game(be careful that the values are reset)

#puts "Enter Name"
#player_name = gets.chomp

require 'pry'

def create_deck
  cards = {}
  (2..10).each { |v| cards[v] = v }
  cards["Jack"] = 10
  cards["Queen"] = 10
  cards["King"] = 10
  cards["Ace"] = [1, 11]
  cards
end

def compile_deck
  hearts = Hash[ create_deck.map { |k , v| [" ♥#{k} of Hearts♥" , v] } ]
  diamonds = Hash[ create_deck.map { |k, v| [" ♦︎#{k} of Diamonds♦︎", v] } ]
  clubs = Hash[ create_deck.map { |k , v| [" ♣︎#{k} of Clubs♣︎" , v] } ]
  spades = Hash[ create_deck.map { |k , v| [" ♠︎#{k} of Spades♠︎" , v] } ]
  deck = hearts.merge(diamonds)
  deck = deck.merge(clubs)
  deck = deck.merge(spades)
end

def deal_cards(deck, n)
  hand = deck.to_a.sample(n)
  hand = Hash[ hand ]
  hand.keys.each do |k|
    deck.delete(k)
  end
  hand
end

def continue?(playervalue, dealervalue, playername)
  if dealervalue == 21
    return "BlackJack, The Dealer Wins."
  elsif playervalue == 21 
    return "BlackJack, #{playername} Wins!"
  elsif dealervalue > 21
    return "The Dealer Busted"
  elsif playervalue > 21
    return "Sorry #{playername}, you are over 21."
  end
  nil
end 

def hit_stay(deck, playerdone, playershand, playervalue)
  begin
    puts "Hit or Stay? (h/s)"
    hitstay = gets.chomp.downcase 
    puts
    puts display(playershand)
    if "h" == hitstay
      newcard = deal_cards(deck, 1)
      newcard.each{ |c, v| playershand[c] = v}
      display(playershand)
      playervalue = player_value(playershand, playervalue)
      return nil
    elsif "s" == hitstay
      playervalue = player_value(playershand, playervalue)
      return playerdone = 0
    end
  end until hitstay == "h" || hitstay == "s"
end

def player_value(playershand, playervalue)
  if playershand.has_value?([1, 11])
    aces = playershand.select { |k, v| v == [1, 11] }
    begin
      evalace = Hash.new
      evalace.store(*aces.shift)
      playershand.delete_if { |k, v| v == [1, 11] }
      playervalue = player_value_calc(playershand, playervalue)
      if playervalue > 10
        playershand[ evalace.key([1, 11])] = 1
      else
        playershand[ evalace.key([1, 11])] = 11
      end
    end until aces.values.count == 0
    playervalue = player_value_calc(playershand, playervalue)
  end 
  if playervalue > 21 && playershand.values.include?(11)
    playershand.each do |k, v|  
      if v == 11 && playervalue > 21
        playershand[k] = 1
        playervalue = player_value_calc(playershand, playervalue)
      end
    end
  playervalue = player_value_calc(playershand, playervalue)
  end
  playervalue = player_value_calc(playershand, playervalue)
end

def player_value_calc(playershand, playervalue)
  playervalue = 0
  playershand.each_value{ |v| playervalue += v }
  playervalue
end

def dealer_hit_stay(dealerdone, dealershand, deck, dealervalue)
  dealervalue = dealer_value(dealershand, dealervalue)
  if dealervalue < 17
    newcard = deal_cards(deck, 1)
    newcard.each{ |c, v| dealershand[c] = v}
    dealervalue = dealer_value(dealershand, dealervalue)
    puts "---------------The Dealer Hits---------------"
    puts
    return nil
  elsif dealervalue <= 21
    puts "---------------The Dealer Stays---------------"
    puts
    return dealerdone = 0
  end
end

def dealer_value(dealershand, dealervalue)
  if dealershand.has_value?([1, 11])
    aces = dealershand.select { |k, v| v == [1, 11] }
    begin
      evalace = Hash.new
      evalace.store(*aces.shift)
      dealershand.delete_if { |k, v| v == [1, 11] }
      dealervalue = dealer_value_calc(dealershand, dealervalue)
      if dealervalue > 10
        dealershand[ evalace.key([1, 11])] = 1
      else
        dealershand[ evalace.key([1, 11])] = 11
      end
    end until aces.values.count == 0
    dealervalue = dealer_value_calc(dealershand, dealervalue)
  end 
  if dealervalue > 21 && dealershand.values.include?(11)
    dealershand.each do |k, v|  
      if v == 11 && dealervalue > 21
        dealershand[k] = 1
        dealervalue = dealer_value_calc(dealershand, dealervalue)
      end
    end
  dealervalue = dealer_value_calc(dealershand, dealervalue)
  end
  dealervalue = dealer_value_calc(dealershand, dealervalue)
end

def dealer_value_calc(dealershand, dealervalue)
  dealervalue = 0
  dealershand.each_value { |v| dealervalue += v }
  dealervalue
end

def players_stay(playerdone, dealerdone)
  (playerdone == 0) && (dealerdone == 0)
end

def display(playershand)
  puts "Your Cards Are: "
  puts
  playershand.each_key { |k| puts k }
  puts
end


puts "What is your name?"
playername = gets.chomp
begin
  system 'clear'
  playerdone = nil
  dealerdone = nil
  deck = compile_deck
  playervalue = 0
  dealervalue = 0
  playershand = deal_cards(deck, 2)
  dealershand = deal_cards(deck, 2)
  begin
    display(playershand)
    playerdone = hit_stay(deck, playerdone, playershand, playervalue)
    dealerdone = dealer_hit_stay(dealerdone, dealershand, deck, dealervalue)
    dealervalue = dealer_value_calc(dealershand, dealervalue)
    playervalue = player_value_calc(playershand, playervalue)
    winner = continue?(playervalue, dealervalue, playername)
  end until winner || players_stay(playerdone, dealerdone)
  if winner == nil
    if playervalue > dealervalue
      puts
      puts "Congratulations #{playername}, You Win!"
    else
      puts
      puts "The Dealer Wins"
    end
  end
  puts
  puts winner
  puts
  puts "Dealer: #{dealervalue}"
  puts "#{playername}: #{playervalue}"
  begin
    puts
    puts "Play Again? (y/n)"
    playagain = gets.chomp.downcase
  end until playagain == ( "y" || "n" )
end until playagain == "n"
